{"version":3,"file":"static/js/100.c54678b1.chunk.js","mappings":"8LACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA8I,4BAA9I,EAAqN,yBAArN,EAA6P,8BAA7P,EAAsS,0BAAtS,EAAyU,wB,mBCO5TA,GAAaC,EAAAA,EAAAA,OAAK,SAACC,GAC5B,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,SAAC,KAAD,CAASC,GAAIF,EAAb,UACI,yBAAMD,EAAMI,YCXxB,EAA0B,yBCObC,EAAU,SAACL,GACpB,OAAO,gBAAKM,UAAWC,EAAhB,SAA4BP,EAAMQ,W,oBCDhCC,GAAUV,EAAAA,EAAAA,OAAK,SAACC,GAEzB,IAAIU,EAAkBV,EAAMW,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAACf,EAAD,CAA4BI,GAAIW,EAAOX,GAAIE,KAAMS,EAAOT,MAAvCS,EAAOX,OAEtEY,EAAmBd,EAAMe,SAASH,KAAI,SAAAJ,GAAO,OAAI,iBAAsBF,UAAWC,EAAjC,WAAiD,gBAClGD,UAAWC,EACXS,IAAKC,EAAaC,IAAK,aAAY,kBACnCZ,UAAWC,EADwB,eACZ,SAACF,EAAD,CACvBH,GAAIM,EAAQN,GAAIM,QAASA,EAAQA,eAJ0BA,EAAQN,OAUvE,OACI,iBAAKI,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKG,KAEL,4BACI,yBAAMI,KACN,SAACK,EAAD,CAAaC,0BAXS,SAACC,GAC/BrB,EAAMsB,mBAAmBD,eAsB3BF,GAAcpB,EAAAA,EAAAA,OAAK,SAACC,GAEtB,IAAMuB,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXjB,QAAS,IAEbkB,SAAU,SAAAC,GACN3B,EAAMoB,0BAA0BO,EAAOnB,YAI/C,OACI,kBAAMkB,SAAUH,EAAOK,aAAvB,WACI,0BAAK,uCAAcL,EAAOM,cAAc,YAAnC,IAA+CvB,UAAWC,QAE/D,0BACI,mBAAQD,UAAWC,EAAnB,kC,mBCnChB,GAAeuB,E,QAAAA,KACXC,EAAAA,EAAAA,KARoB,SAACC,GACrB,MAAO,CACHrB,QAASqB,EAAMC,YAAYtB,QAC3BI,SAAUiB,EAAMC,YAAYlB,YAKP,CACrBO,mBAAAA,EAAAA,IAEJY,EAAAA,EAJJ,CAKEzB,I,kIClBI0B,EAAkB,SAACH,GACrB,MAAO,CACHI,OAAQJ,EAAMK,KAAKD,SAgB3B,MAbO,SAA+BE,GAUlC,OAAOP,EAAAA,EAAAA,IAAQI,EAARJ,EARmB,SAAC/B,GACvB,IAAOoC,EAAwBpC,EAAxBoC,OAAWG,EChBX,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAGlD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GAEpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,EDAD,CAA+B5C,EAA/B,GAEA,OAAKoC,GAEE,SAACE,GAAD,UAAsBC,KAFT,SAAC,KAAD,CAAUpC,GAAI,gB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4GlQq\",\"dialogsItems\":\"Dialogs_dialogsItems__+jGiD\",\"active\":\"Dialogs_active__kOJbH\",\"messageImg\":\"Dialogs_messageImg__PXc4U\",\"dialog\":\"Dialogs_dialog__MoI+F\",\"message\":\"Dialogs_message__Qqiyu\",\"imageAndText\":\"Dialogs_imageAndText__u6c+u\",\"textarea\":\"Dialogs_textarea__PyJ7D\",\"button\":\"Dialogs_button__bqHM6\"};","import React, {memo} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemType = {\n    id: number\n    name: string\n}\n\nexport const DialogItem = memo((props: DialogItemType) => {\n    let path = \"/dialogs/\" + props.id;\n    return (\n        <NavLink to={path}>\n            <div>{props.name}</div>\n        </NavLink>\n    )\n})","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__GcHvM\"};","import React from \"react\";\nimport s from './Message.module.css'\n\ntype MessageType = {\n    id: number\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n    return <div className={s.message}>{props.message}</div>\n}","import React, {memo} from \"react\";\nimport s from './Dialogs.module.css';\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport postUserSvg from \"../../assets/img/postUser.png\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {useFormik} from \"formik\";\n\nexport const Dialogs = memo((props: DialogsPropsType & { isAuth: boolean }) => {\n\n    let dialogsElements = props.dialogs.map(dialog => <DialogItem key={dialog.id} id={dialog.id} name={dialog.name}/>)\n\n    let messagesElements = props.messages.map(message => <div key={message.id} className={s.imageAndText}><img\n        className={s.messageImg}\n        src={postUserSvg} alt={'Message'}/><span\n        className={s.message}> <Message\n        id={message.id} message={message.message}/></span></div>)\n\n    const onSendMessageClickHandler = (newMessage: string) => {\n        props.sendNewMessageText(newMessage)\n    }\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div>\n                <div>{messagesElements}</div>\n                <AddItemForm onSendMessageClickHandler={onSendMessageClickHandler}\n                />\n            </div>\n\n        </div>\n    )\n})\n\ntype AddItemFormPropsType = {\n    onSendMessageClickHandler: (newMessage: string) => void\n}\n\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\n\n    const formik = useFormik({\n        initialValues: {\n            message: ''\n        },\n        onSubmit: values => {\n            props.onSendMessageClickHandler(values.message)\n        },\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div><textarea {...formik.getFieldProps('message')} className={s.textarea}/>\n            </div>\n            <div>\n                <button className={s.button}>Send message</button>\n            </div>\n        </form>\n    )\n})","import {FC} from \"react\";\nimport {InitialStateDialogsType, sendNewMessageText} from \"../../Redux/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {StateType} from \"../../Redux/reduxStore\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype mapDispatchToDialogsPropsType = {\n    sendNewMessageText: (newMessage: string) => void\n    updateNewMessageText: (newMessage:string) => void\n}\n\nexport type DialogsPropsType = InitialStateDialogsType & mapDispatchToDialogsPropsType\n\nconst mapStateToProps = (state: StateType) => {\n    return {\n        dialogs: state.DialogsPage.dialogs,\n        messages: state.DialogsPage.messages\n    }\n}\n\nexport default compose<FC>(\n    connect(mapStateToProps, {\n        sendNewMessageText\n    }),\n    withAuthRedirect\n)(Dialogs)\n","import React, { FC } from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../Redux/reduxStore\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function WithAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n};\r\n\r\nexport default WithAuthRedirect;\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["DialogItem","memo","props","path","id","to","name","Message","className","s","message","Dialogs","dialogsElements","dialogs","map","dialog","messagesElements","messages","src","postUserSvg","alt","AddItemForm","onSendMessageClickHandler","newMessage","sendNewMessageText","formik","useFormik","initialValues","onSubmit","values","handleSubmit","getFieldProps","compose","connect","state","DialogsPage","withAuthRedirect","mapStateToProps","isAuth","auth","WrappedComponent","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}