{"version":3,"file":"static/js/269.1ad87649.chunk.js","mappings":"oOAWMA,EAAW,SAACC,GACd,IAAMC,EAA0B,GAahC,OAZKD,EAAOE,MAEA,4CAA4CC,KAAKH,EAAOE,SAChED,EAAOC,MAAQ,yBAFfD,EAAOC,MAAQ,oBAKdF,EAAOI,SAEDJ,EAAOI,SAASC,OAAS,IAChCJ,EAAOG,SAAW,gCAFlBH,EAAOG,SAAW,uBAKfH,GAIEK,GAAQC,EAAAA,EAAAA,OAAK,YAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAEzBC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXV,MAAO,GACPE,SAAU,GACVS,YAAY,GAEhBd,SAAAA,EACAe,SAAU,SAAAd,GACNQ,EAAMR,EAAOE,MAAOF,EAAOI,SAAUJ,EAAOa,eAIpD,OAAIJ,GACO,SAAC,KAAD,CAAUM,GAAI,aAIrB,gBAAKC,UAAU,aAAf,UACI,gBAAKA,UAAU,aAAf,UACI,gBAAKA,UAAU,OAAf,UACI,kBAAMF,SAAUJ,EAAOO,aAAcD,UAAU,aAA/C,WACI,4BACI,0BAAOE,GAAG,QACHC,YAAY,SAAYT,EAAOU,cAAc,WAEnDV,EAAOW,QAAQnB,OAASQ,EAAOT,OAAOC,QACnC,gBAAKoB,MAAO,CAACC,MAAO,OAApB,SAA6Bb,EAAOT,OAAOC,YAEnD,4BACI,kCACIsB,KAAK,YAAed,EAAOU,cAAc,aAD7C,IAC0DD,YAAY,cACrET,EAAOW,QAAQjB,UAAYM,EAAOT,OAAOG,WACtC,gBAAKkB,MAAO,CAACC,MAAO,OAApB,SAA6Bb,EAAOT,OAAOG,eAGnD,4BACI,0BAAOoB,KAAK,YACDd,EAAOU,cAAc,cAFpC,mBAKA,kD,UCrDxB,GAAeK,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACHlB,OAAQkB,EAAMC,KAAKnB,UAKE,CACrBD,MAAAA,EAAAA,KAFR,CAIEF","sources":["components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"sourcesContent":["import React, {memo} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {loginPropsType, mapDispatchToLoginPropsType} from \"./LoginContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean;\r\n};\r\n\r\nconst validate = (values: any) => {\r\n    const errors: FormikErrorType = {};\r\n    if (!values.email) {\r\n        errors.email = \"Email is required\";\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = \"Invalid email address\";\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = \"Password is required\";\r\n    } else if (values.password.length < 3) {\r\n        errors.password = \"Must be 3 characters or more\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\nexport const Login = memo(({login, isAuth}: loginPropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            login(values.email, values.password, values.rememberMe)\r\n        },\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-page\">\r\n            <div className=\"login-page\">\r\n                <div className=\"form\">\r\n                    <form onSubmit={formik.handleSubmit} className=\"login-form\">\r\n                        <div>\r\n                            <input id=\"email\"\r\n                                   placeholder=\"email\" {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                type=\"password\" {...formik.getFieldProps('password')} placeholder=\"password\"/>\r\n                            {formik.touched.password && formik.errors.password && (\r\n                                <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                            )}\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\"\r\n                                   {...formik.getFieldProps('checkbox')}\r\n                            /> Remember me\r\n                        </div>\r\n                        <button>login</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {compose} from \"redux\";\nimport {FC} from \"react\";\nimport {connect} from \"react-redux\";\nimport {Login} from \"./Login\";\nimport {InitialStateAuthType, login} from \"../../Redux/authReducer\";\nimport {StateType} from \"../../Redux/reduxStore\";\n\nexport type mapDispatchToLoginPropsType = {\n    login: (email: string, password: string, rememberMe: boolean) => void\n}\nexport type loginPropsType = mapDispatchToLoginPropsType & InitialStateAuthType\n\nconst mapStateToProps = (state: StateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<FC>(\n    connect(mapStateToProps, {\n        login\n    })\n)(Login)\n"],"names":["validate","values","errors","email","test","password","length","Login","memo","login","isAuth","formik","useFormik","initialValues","rememberMe","onSubmit","to","className","handleSubmit","id","placeholder","getFieldProps","touched","style","color","type","compose","connect","state","auth"],"sourceRoot":""}